spring.application.name=productService

### mongo db database connection
spring.data.mongodb.host=mongo-db-service
spring.data.mongodb.port=27017
spring.data.mongodb.database=product-service-db
spring.data.mongodb.username=root
spring.data.mongodb.password=rootpassword

### Eureka discovery server (updated to use 'discovery-server' service name defined in docker-compose.yml):
#These properties are part of the Eureka client configuration in a Spring Boot microservice using Eureka for service discovery
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
#This is a property used in Spring Boot applications (from Spring Cloud Netflix Eureka, which is part of the Eureka client configuration) that register with a Eureka Server (part of Netflix's Eureka for service discovery). It's defining the URL of the Eureka Server where our application (the Eureka client) will register itself.
#url structure: http://username:password@hostname:port/contextPath

eureka.instance.preferIpAddress=true
#This property tells the Eureka client to register the instance using its IP address instead of its hostname when it communicates with the Eureka server.

eureka.instance.hostname=localhost
#This property explicitly sets the hostname that the Eureka client will use when registering with the Eureka server. In the eureka registry dashboard, this service will be registered using the mentioned hostname.
#How above two properties Work Together: eureka.instance.preferIpAddress=true: This tells Eureka to prefer registering the service using its IP address. eureka.instance.hostname=product-service: Even if you're specifying a hostname, Eureka will use the IP address for communication if preferIpAddress is set to true. If preferIpAddress is false (or not set), Eureka will register the service with this custom hostname (product-service).


### Let system assign the port automatically
server.port=0
